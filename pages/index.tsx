import Head from "next/head";
import Script from "next/script";
import React, {useState, useEffect, useReducer, useMemo } from "react";
import GameKeyboard from "./../components/GameKeyboard";
import GameBoxes from "./../components/GameBoxes";
import { keys } from "../constants/index";
import wordsArr from "../data/5letterwords.json"
import useTimeOutMessage from "@/hooks/useTimeOutMessage";

interface ITriedLetters {
  wrongLetters: string[],
  semiCorrectLetters: string[],
  correctLetters: string[],
}
 

type GameStatus = "ongoing" | "won" | "lost"

export default function Home() {
  const [words, setWords] = useState<string[]>([]);
  const [word, setWord] = useState<number>(0);
  const [gameStatus, setGameStatus] = useState<GameStatus>("ongoing")
  const wordsLength = useMemo(() => wordsArr?.words?.length, [])
  const { messageState, setMessageState } = useTimeOutMessage()

  const answer = useMemo(() => wordsArr.words[Math.floor(Math.random()*wordsLength)].toUpperCase(), [wordsLength])
  console.log("answer", answer)

    const [triedletters, updateTriedLetters] = useReducer((prevState: ITriedLetters, newValue: string) => {
        
        return {
            wrongLetters: prevState.wrongLetters.concat(newValue.split("").filter(letter => !answer.includes(letter))),
            semiCorrectLetters: prevState.semiCorrectLetters.concat(newValue.split("").filter(letter => answer.includes(letter))),
            correctLetters: newValue.split("").map((letter, index) => answer[index] === letter ? letter : prevState?.correctLetters[index] ?? "")
        }
    }, {
        wrongLetters: [],
        semiCorrectLetters: [],
        correctLetters: []
    })

  const handleDelete = () => {
    const newWords = [...words];
    if (newWords[word]?.length === 0) return;
    newWords[word] = newWords[word].slice(0, -1);
    setWords(newWords);
  };

  const handleInput = (key: string) => {
    if (gameStatus !== "ongoing") return
    // console.log({ key });
    const newWords = [...words];
    if (newWords[word]?.length >= 5) return;
    newWords[word] = (newWords[word] ?? "") + key;
    setWords(newWords);
  };

  const handleSubmit = () => {
    console.log(words[word])
    if (!words[word] || words[word]?.length < 5 && word < 6) {
      return setMessageState(`Not enough letters`)
    }
    if (word < 6) {
        if (!wordsArr.words.includes(words[word].toLowerCase())) {
          console.log("Not in word list", words[word])
          return setMessageState(`Not in word list`)
        }

        updateTriedLetters(words[word])

        if (words[word].toUpperCase() === answer.toUpperCase()) {
          console.log("game ended", words[word].toUpperCase(), answer.toUpperCase())
          setTimeout(() => {
            setGameStatus("won")
          }, 2000)
          setWord(prev => ++prev)
          return setMessageState(`GENIUS`)
        }

        if (word === 5) {
          console.log("game ended", answer.toUpperCase())
          setTimeout(() => {
            setGameStatus("lost")
          }, 1000)
          setWord(prev => ++prev)

          return setMessageState(answer.toUpperCase())
        }

        setWord(prev => ++prev)
    }
  };




  const handleKeyDown = (event: KeyboardEvent) => {
      // console.log("Key pressed:", event.keyCode);
      if (event.keyCode === 8) {
        handleDelete()
      } else if (event.keyCode === 13) {
        handleSubmit()
      } else if (keys.includes(event.key.toUpperCase())) {
        handleInput(event.key.toUpperCase())
      }
    }
  useEffect(() => {
    window.addEventListener("keydown", handleKeyDown);

    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [words, word]);

  return (
    <div className="flex flex-col items-center justify-center gap-4 p-4 md:pt-8">
      <Head>
        <title>Home Page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {
        messageState && 
          <div className="fixed top top-20 shadow font-bold left-1/2 -translate-x-1/2 px-3 py-2 text-white bg-black">{messageState}</div>
      }
      {
        gameStatus==="won" && 
          <div className="fixed top-0 left-0 w-full flex justify-center items-center h-screen p-8">
            <div className="flex flex-col gap-6 items-center text-center bg-white p-8 shadow-md py-16 rounded">   
              <h1 className="text-2xl">Congratulations, you won</h1>
              <p>You&#39;re a Genius</p>
              <button onClick={() => window.location.reload()} className="p-3 py-2 bg-black text-white">Next Stage</button>
            </div> 
          </div>
      }
      {
        gameStatus==="lost" && 
          <div className="fixed top-0 left-0 w-full flex justify-center items-center h-screen p-8">
            <div className="flex flex-col gap-6 items-center text-center bg-white p-8 shadow-md py-16 rounded">   
              <h1 className="text-2xl">Sorry, you lost</h1>
              <p>The correct answer is {answer}</p>
              <button onClick={() => window.location.reload()} className="p-3 py-2 bg-black text-white">Next Stage</button>
            </div> 
          </div>
      }
      <h1 className="sm:mb-4 text-3xl font-extrabold">Wordle</h1>
      <GameBoxes words={words} word={word} triedletters={triedletters} />
      <GameKeyboard
          wrongLetters={triedletters.wrongLetters.join("")}
          almostCorrectLetters={triedletters.semiCorrectLetters.join('')}
          correctLetters={triedletters.correctLetters.join("")}
        handleSubmit={handleSubmit}
        handleInput={handleInput}
        handleDelete={handleDelete}
      />
    </div>
  );
}
